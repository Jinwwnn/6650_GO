/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"crypto/rand"
	"database/sql"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

var db *sql.DB

// Album represents the album data structure
type Album struct {
	AlbumID   string `json:"albumID"`
	Artist    string `json:"artist"`
	Title     string `json:"title"`
	Year      string `json:"year"`
	ImageData []byte `json:"-"`
}

// generateAlbumID generates a random album ID
func generateAlbumID() string {
	bytes := make([]byte, 8)
	rand.Read(bytes)
	return hex.EncodeToString(bytes)
}

func NewAlbum(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	// Parse multipart form data
	err := r.ParseMultipartForm(10 << 20) // 10 MB max
	if err != nil {
		sendErrorResponse(w, "Failed to parse form data", http.StatusBadRequest)
		return
	}

	// Get image file
	file, header, err := r.FormFile("image")
	if err != nil {
		sendErrorResponse(w, "Image part is missing", http.StatusBadRequest)
		return
	}
	defer file.Close()

	// Read image data
	imageData, err := io.ReadAll(file)
	if err != nil {
		log.Printf("Failed to read image: %v", err)
		http.Error(w, "Failed to read image", http.StatusInternalServerError)
		return
	}

	// Get profile data
	profileData := r.FormValue("profile")
	if profileData == "" {
		sendErrorResponse(w, "Profile part is missing", http.StatusBadRequest)
		return
	}

	// Parse profile JSON
	var profile AlbumInfo
	err = json.Unmarshal([]byte(profileData), &profile)
	if err != nil {
		sendErrorResponse(w, "Invalid profile data format", http.StatusBadRequest)
		return
	}

	// Generate unique album ID
	metadata := ImageMetadata{
		AlbumID:   generateAlbumID(),
		ImageSize: fmt.Sprintf("%d", header.Size),
	}

	// Insert into database
	_, err = db.Exec(`
		INSERT INTO albums (album_id, artist, title, year, image_data)
		VALUES (?, ?, ?, ?, ?)`,
		metadata.AlbumID, profile.Artist, profile.Title, profile.Year, imageData)
	if err != nil {
		log.Printf("Failed to insert album: %v", err)
		http.Error(w, "Failed to save album", http.StatusInternalServerError)
		return
	}

	// Send success response
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(metadata)
}

func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	albumID := vars["albumID"]

	var album Album
	err := db.QueryRow(`
		SELECT album_id, artist, title, year
		FROM albums
		WHERE album_id = ?`, albumID).Scan(
		&album.AlbumID,
		&album.Artist,
		&album.Title,
		&album.Year)

	if err == sql.ErrNoRows {
		http.Error(w, "Album not found", http.StatusNotFound)
		return
	}
	if err != nil {
		log.Printf("Failed to get album: %v", err)
		http.Error(w, "Failed to get album", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(album)
}

func sendErrorResponse(w http.ResponseWriter, message string, statusCode int) {
	w.WriteHeader(statusCode)
	errMsg := ErrorMessage{Msg: message}
	json.NewEncoder(w).Encode(errMsg)
}
